                ******import*****

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

                *******load the data in to jupyter ****

dataset = pd.read_csv("Bank1.csv")

                *****get out put****

dataset.head()

                *****get the bar chart salary and position*****

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Company_ABC_HumanResource.csv')

plt.figure(figsize=(10, 6))

plt.bar(df['Position'], df['Salary'])
plt.xlabel('Position')
plt.ylabel('Salary')
plt.title('Position vs Salary')
plt.xticks(rotation=45, ha='right')

plt.tight_layout()
plt.show(),

                *****get the bar chart *****

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Company_ABC_HumanResource.csv')

department_counts = df['Department'].value_counts()

plt.figure(figsize=(10, 6))

department_counts.plot(kind='bar', color='skyblue')
plt.xlabel('Department')
plt.ylabel('Number of Employees')
plt.title('Number of Employees in Different Departments')
plt.xticks(rotation=45, ha='right')

plt.tight_layout()
plt.show()


                *****get the sectter *****

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('Company_ABC_HumanResource.csv')

plt.figure(figsize=(10, 6))

plt.scatter(df['EmployerSatisfaction'], df['Salary'], alpha=0.5)
plt.xlabel('Employer Satisfaction')
plt.ylabel('Salary')
plt.title('Employer Satisfaction vs Salary')

plt.tight_layout()
plt.show()


                ****missing valuse*****

import pandas as pd

df = pd.read_csv('Company_ABC_HumanResource.csv')

missing_values = df.isna().sum()

print(missing_values)



                ****remaining_missing_values*****


import pandas as pd

df = pd.read_csv('Company_ABC_HumanResource.csv')

mode_marital_status = df['MaritalStatus'].mode()[0]

df['MaritalStatus'].fillna(mode_marital_status, inplace=True)

remaining_missing_values = df.isna().sum()

print(remaining_missing_values)

        *********************

import pandas as pd

df = pd.read_csv('Company_ABC_HumanResource.csv')

mean_salary = df['Salary'].mean()

df['Salary'].fillna(mean_salary, inplace=True)

remaining_missing_values = df.isna().sum()

print(remaining_missing_values)



                ******save data *******************

import pandas as pd

df = pd.read_csv('Company_ABC_HumanResource.csv')

mean_salary = df['Salary'].mean()

df['Salary'].fillna(mean_salary, inplace=True)

preprocessed_filename = 'PreprocessedCompany_ABC_HumanResource.csv'
df.to_csv(preprocessed_filename, index=False)

import shutil
destination_folder = 'seu.is.18.ict.060'
shutil.move(preprocessed_filename, destination_folder)

print(f"Preprocessed dataset saved as '{preprocessed_filename}' in the '{destination_folder}' folder.")


                ********creare array*****

data_array = df.to_numpy()

                ******k -mean **********

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

df = pd.read_csv('Components_of_Fertilizer.csv')

data_array = df.to_numpy()

inertia = []

for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(data_array)
    inertia.append(kmeans.inertia_)


plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), inertia, marker='o')
plt.xlabel('Number of Clusters')
plt.ylabel('Sum of Squared Distances (Inertia)')
plt.title('Elbow Method for Optimal Number of Clusters')
plt.xticks(range(1, 11))
plt.show()


                ***********clustering **********
import pandas as pd
from sklearn.cluster import KMeans

df = pd.read_csv('Components_of_Fertilizer.csv')

data_array = df.to_numpy()

num_clusters = 3

kmeans = KMeans(n_clusters=num_clusters, init='k-means++', random_state=42)

kmeans.fit(data_array)

cluster_labels = kmeans.labels_

df['Cluster'] = cluster_labels

print(df.head())

                **********matrix implementation************

matrix=[]
r = int(input("enter the rows"))
c = int(input("enter the coloms"))

**********create metrics************
import numpy as np

# Create a matrix using a list of lists
matrix = np.array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9]])

# Print the matrix
print("Original Matrix:")
print(matrix)


********transform**********
# Transpose the matrix
transposed_matrix = np.transpose(matrix)

# Print the transposed matrix
print("Transposed Matrix:")
print(transposed_matrix)





tuple[2,3,5,6.5]

array=[2,3,4,5,6,7,8,9,10]
from array import array

from datetime import date

today = date.today()
print("Today's date:", today)

from datetime import date

def calculateAge(dob):
    today = date.today()
    age = today.date- dob.date -((today.month, today.day) <
         (dob.month, dob.day))

    return age

print(calculateAge(date(1999, 10, 24)), " years old")

*********numpy**************


import numpy as np

np.zeros(10, int)

np.ones(5, int)

array1 = np.array([10,20,30])
array1

array2 = np.array([40,50,60])
array2

new_array = np.concatenate([array1,array2])
new_array

np.empty(10)

np.arange(100)

np.arange(1,11)

a = np.array([1,2,3,4])
a

b = np.array([[1,2,3,4],[5,6,7,8]])
b

c = np.array([[7,2,15,1],[8,4,25,3]])
c

**********sort ***********

np.sort(c)

print('shape of the array',np.shape(a))
print('size of the array',np.size(a))
print('daimention',np.ndim(a))

print('shape of the array',np.shape(b))
print('size of the array',np.size(b))
print('daimention',np.ndim(b))

print("shape",c.shape)
print("size",c.size)
print("shape",c.ndim)

np.reshape(c, (4,2))



d = np.arange(1,16)
d

d.ndim

e = np.reshape(d,(3,5))
e

e[np.newaxis, :]

print(e.ndim)
x=e[np.newaxis, :]
print(x)
print(x.ndim)

y = np.expand_dims(e, axis =0)
print(y)

abc = np.array(np.arange(1,11)*11)
abc

abc[3]+abc[5]

a1 = np.array(abc[5:10])
a1

a2 = np.array(abc[5:])
a2

abc

(abc > 50)


*************serice******************


my_serice = pd.Series([5,10,15,20,25])
print(my_serice)

my_serice.dtype

my_serice[3]

s1 = my_serice +100
s1

s1 = my_serice *10
s1

mydate =pd.date_range("11/08/2023",periods=14)
mydate

df = pd.DataFrame(np.random.rand(14,6),index=mydate,columns=list("ABCDEF"))

df





